/**
 * @file Firestore Security Rules for Hour Logger Pro.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model. Each user can only access their own data.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information, where {userId} is the Firebase Auth UID.
 * - /users/{userId}/logs/{logId}: Stores work log entries for a specific user.
 *
 * Key Security Decisions:
 * - Users can only create their own user document and can only read, update, and delete their own profile.
 * - Users can only create, read, update, and delete log entries under their own user ID.
 * - Data validation is relaxed to allow for rapid prototyping and iteration, focusing on ownership and relational integrity checks.
 *
 * Denormalization for Authorization:
 *  - The user's UID is used as the document ID in `/users/{userId}` to simplify ownership checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces user-ownership for user profiles.
     * @path /users/{userId}
     * @allow (create) - Authenticated user with UID 'user_abc' can create their own profile at /users/user_abc.
     * @allow (get, update, delete) - Authenticated user with UID 'user_abc' can read, update, and delete their profile at /users/user_abc.
     * @deny (create) - Authenticated user with UID 'user_abc' cannot create a profile at /users/user_xyz.
     * @deny (get, update, delete) - Authenticated user with UID 'user_xyz' cannot read, update, and delete the profile at /users/user_abc.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces user-ownership for log entries.
     * @path /users/{userId}/logs/{logId}
     * @allow (create) - Authenticated user with UID 'user_abc' can create a log entry at /users/user_abc/logs/log_123.
     * @allow (get, list, update, delete) - Authenticated user with UID 'user_abc' can read, list, update, and delete their log entry at /users/user_abc/logs/log_123.
     * @deny (create) - Authenticated user with UID 'user_xyz' cannot create a log entry at /users/user_abc/logs/log_123.
     * @deny (get, list, update, delete) - Authenticated user with UID 'user_xyz' cannot read, list, update, or delete log entries at /users/user_abc/logs/log_123.
     * @principle Enforces document ownership and prevents unauthorized access to log entries.
     */
    match /users/{userId}/logs/{logId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

        function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }


      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}